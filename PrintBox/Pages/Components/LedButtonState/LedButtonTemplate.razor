@inject IBoxDataService boxdata

<div>

	@if (@LedState == true)
	{
		<MudPaper Class="pa-3" Style="@($" background:#F57F17;")">
			<div class="row ma-2">
				<div class=" mx-2 pa-2">
					<MudText Align="Align.Center"><h4>Led @LedNum</h4></MudText>
					<MudIconButton Icon="@Icons.Filled.Lightbulb" Color="Color.Dark" Style="@($" background:#00c4ff;")" @onclick="SetStateFunction" Size="Size.Large" />
				</div>
			</div>
		</MudPaper>
	}
	else
	{
		<MudPaper Class="pa-3" Style="@($" background:#0043ff;")">
			<div class="row ma-2">

				<div class=" mx-2 pa-2">
					<MudText Align="Align.Center" ><h4>Led @LedNum</h4></MudText>
					<MudIconButton Icon="@Icons.Outlined.Lightbulb" Color="Color.Dark" Style="@($" background:#001f2a;")" @onclick="SetStateFunction" Size="Size.Large" />
				</div>
			</div>
		</MudPaper>
	}
</div>



@code {
	[Parameter]
	public string boxname { get; set; }

	[Parameter]
	public Boolean LedState { get; set; }

	[Parameter]
	public int LedNum { get; set; }

	private string name;



	private IBoxStateModel ReadboxStates;

	protected override async Task OnParametersSetAsync()
	{

		var b = await boxdata.ReadState(boxname);

		ReadboxStates = new DisplayBoxStateModel
			{
				BoxId = b.BoxId,
				Led1State = b.Led1State,
				Led2State = b.Led2State,
				Led3State = b.Led3State,
				Led4State = b.Led4State,
				DoorState = b.DoorState
			};
	}


	private async Task HandleUpdateState()
	{
		await boxdata.UpdateState(ReadboxStates);
		//boxdata.UpdateStateText(ReadboxStates, ReadboxStates.BoxId, ReadboxStates.Led1State, ReadboxStates.Led2State, ReadboxStates.Led3State, ReadboxStates.Led4State, ReadboxStates.Led5State, ReadboxStates.Led6State, ReadboxStates.Led7State);
	}





	private async Task SetStateFunction()
	{
		if (LedState == true)
		{
			LedState = false;

			switch (LedNum)
			{
				case 1:
					ReadboxStates.Led1State = false;
					break;
				case 2:
					ReadboxStates.Led2State = false;
					break;
				case 3:
					ReadboxStates.Led3State = false;
					break;
				case 4:
					ReadboxStates.Led4State = false;
					break;
				default:
					break;
			}
		}
		else
		{
			LedState = true;

			switch (LedNum)
			{
				case 1:
					ReadboxStates.Led1State = true;
					break;
				case 2:
					ReadboxStates.Led2State = true;
					break;
				case 3:
					ReadboxStates.Led3State = true;
					break;
				case 4:
					ReadboxStates.Led4State = true;
					break;
				default:
					break;
			}

		}
		await boxdata.UpdateState(ReadboxStates);

		var b = await boxdata.ReadState(boxname);

	}
}



